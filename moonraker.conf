[server]
host: 0.0.0.0
port: 7125
#klippy_uds_address: {data_path}/comms/klippy.sock
klippy_uds_address: /home/pi/printer_data/comms/klippy.sock
max_upload_size: 1024

[file_manager]
enable_object_processing: True

# [machine]
# provider: systemd_dbus

# [data_store]
# temperature_store_size: 1200
# gcode_store_size: 1000

[authorization]
trusted_clients = 
	10.0.0.0/8
	127.0.0.0/8
	169.254.0.0/16
	172.16.0.0/12
	192.168.0.0/16
	FE80::/10
	::1/128
cors_domains = 
	http://*.lan
	http://*.local
	https://my.mainsail.xyz
	http://my.mainsail.xyz
	https://app.fluidd.xyz
	http://app.fluidd.xyz

# [authorization]
# force_logins: False
# cors_domains:
#   *.local
#   *.lan
#   *://app.fluidd.xyz
#   *://dev-app.fluidd.xyz
#   *://my.mainsail.xyz
# trusted_clients:
#     10.0.0.0/8
#     127.0.0.0/8
#     169.254.0.0/16
#     172.16.0.0/12
#     192.168.0.0/16
#     FE80::/10
#     ::1/128

[history]

[octoprint_compat]

[update_manager]
channel = dev
refresh_interval = 168

[update_manager mainsail]
type = web
channel = stable
repo = mainsail-crew/mainsail
path = ~/mainsail

[update_manager kiauh]
type: git_repo
path: ~/kiauh
origin: https://github.com/th33xitus/kiauh.git
is_system_service: False

# [update_manager client z_calibration]
# type: git_repo
# path: ~/klipper_z_calibration
# origin: https://github.com/protoloft/klipper_z_calibration.git
# install_script: install.sh
# managed_services: klipper



[mqtt]
address: 192.168.1.115
port: 1883
username: {secrets.mqtt_credentials.username}
password: {secrets.mqtt_credentials.password}
#   The protocol to use when connecting to the Broker.  May be v3.1,
#   v3.1.1, and v5.  The default is v3.1.1
#mqtt_protocol: v3.1.1
#   If set to true the MQTT client will subscribe to API topic, ie:
#     {instance_name}/moonraker/api/request
#   This can be set to False if the user does not wish to allow API
#   requests over MQTT.  The default is True. 
enable_moonraker_api: True
instance_name: printer/VyperC
# status_objects:
#        webhooks
#        toolhead=position,print_time,homed_axes
#        extruder=temperature
#   A newline separated list of Klipper objects whose state will be
#   published.  There are two different ways to publish the states - you
#   can use either or both depending on your need.  See the 
#   "publish_split_status" options for details.
#
#   For example, this option could be set as follows:
#
#     status_objects:
#       webhooks
#       toolhead=position,print_time,homed_axes
#       extruder=temperature
#
#   In the example above, all fields of the "webhooks" object will be tracked
#   and changes will be published.  Only the "position", "print_time", and
#   "homed_axes" fields of the "toolhead" will be tracked.  Likewise, only the
#   "temperature" field of the extruder will be tracked. See the
#   "Printer Objects" section of the documentation for an overview of the most
#   common objects available.
#
#   Note that Klipper will only push an update to an object/field if the field
#   has changed.  An object with no fields that have changed will not be part
#   of the payload.  Object state is checked and published roughly every 250 ms.
#
#   If not configured then no objects will be tracked and published to
#   the klipper/status topic.
default_qos: 0
#   The QOS level to use for the API topics. If not provided, the
#   value specified by "default_qos" will be used.
#api_qos:

[power printer C]
type: mqtt
qos: 1
command_topic: espurna/office/printer_c/main_power/relay/0/set
command_payload: 
    {% if command == "on" %}
      1
    {% else %}
      0
    {% endif %}
retain_command_state: False
query_topic: espurna/office/printer_c/main_power/relay/0
#  The topic used to query command state.  It is expected that the device will
#  respond by publishing to the "state_topic".  This parameter is optional,
#query_payload:
#  The payload to send with the query topic.  This may be a template or a string.
#  The default is no payload.
state_topic: espurna/office/printer_c/main_power/relay/0
state_response_template: 
   {% if payload == "1" %}
     on
   {% else %}
     off
   {% endif %}
#  A template used to parse the payload received with the state topic.  A
#  "payload" variable is provided the template's context.  This template
#  must resolve to "on" or "off".  For example:
#    {% set resp = payload|fromjson %}
#    {resp["POWER"]}
#  The above example assumes a json response is received, with a "POWER" field
#  that set to either "ON" or "OFF".  The resolved response will always be
#  trimmed of whitespace and converted to lowercase. The default is the payload.
query_after_command: False

[power printer E]
type: mqtt
qos: 1
command_topic: espurna/office/printer_e/main_power/relay/0/set
command_payload: 
    {% if command == "on" %}
      1
    {% else %}
      0
    {% endif %}
retain_command_state: False
query_topic: espurna/office/printer_e/main_power/relay/0
state_topic: espurna/office/printer_e/main_power/relay/0
state_response_template: 
   {% if payload == "1" %}
     on
   {% else %}
     off
   {% endif %}
#  {% set resp = payload|fromjson %}
#  {resp["relay/0"]}
    # {% if resp["relay/0"] == "1" %}
    #   on
    # {% else %}
    #   off
    # {% endif %}



# {
#   "datetime": "2023-02-04 23:01:04",
#   "mac": "68:C6:3A:A6:C4:81",
#   "host": "ESPURNA-F",
#   "ip": "192.168.1.126",
#   "id": 0,
#   "relay/0": 1,
#   "vcc": 3486,
#   "loadavg": 2,
#   "freeheap": 16992,
#   "uptime": 2930122,
#   "rssi": -44,
#   "ssid": "Ion2",
#   "desc": "ESPURNA-A6C481",
#   "board": "KMC_70011",
#   "version": "1.15.0-dev.git79157645",
#   "app": "ESPURNA"
# }

#  A template used to parse the payload received with the state topic.  A
#  "payload" variable is provided the template's context.  This template
#  must resolve to "on" or "off".  For example:
#    {% set resp = payload|fromjson %}
#    {resp["POWER"]}
#  The above example assumes a json response is received, with a "POWER" field
#  that set to either "ON" or "OFF".  The resolved response will always be
#  trimmed of whitespace and converted to lowercase. The default is the payload.
query_after_command: False
